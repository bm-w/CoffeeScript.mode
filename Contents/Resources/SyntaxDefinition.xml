<?xml version="1.0" encoding="UTF-8"?>
<syntax>
  <head>
    <name>CoffeeScript</name>
    <charsintokens><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@$]]></charsintokens>
    <!--ZEROWIDTHS Issue:
        It seems that zero-width lookaheads/lookbehinds cannot be used as state end symbols
        n Coda 2 (I don't know about SEE itself). As a workaround, I've required padding with
        a whitespace character. Looking for a better solution.
        
        Look for the 'ZEROWIDTHS' tag throughout this document to see where this issue occurs.
    -->
  </head>
  <states>
    <default id="Base">
      
      <keywords id="This" scope="language.property" useforautocomplete="yes">
        <string>this</string>
      </keywords>
      
      <keywords id="Globals, constants and aliases" scope="constant" useforautocomplete="yes">
        <string>true</string>
        <string>yes</string>
        <string>on</string>
        <string>false</string>
        <string>no</string>
        <string>off</string>
        
        <string>null</string>
        <string>undefined</string>
        
        <!-- Feel free to add -->
        <string>arguments</string>
        <string>process</string>
        <string>console</string>
        <string>window</string>
        <string>document</string>
        <string>$</string>
      </keywords>
      
      <keywords id="Keywords" scope="keyword.control" useforautocomplete="yes">
        <string>if</string>
        <string>unless</string>
        <string>else</string>
        <string>switch</string>
        <string>when</string>
        <string>then</string>
        
        <string>class</string>
        <string>extends</string>
        
        <string>for</string>
        <string>while</string>
        <string>until</string>
        <string>do</string>
        
        <string>break</string>
        <string>continue</string>
        <string>return</string>
        
        <string>try</string>
        <string>catch</string>
        <string>finally</string>
        <string>throw</string>
        
        <string>new</string>
      </keywords>
      
      <keywords id="Operators" useforautocomplete="yes" scope="language.operator">
        <string>is</string>
        <string>isnt</string>
        <string>not</string>
        <string>and</string>
        <string>of</string>
        <string>or</string>
        <string>in</string>
        <regex>([\+\-\*\/\=\!\?\&lt;\>\%])</regex>
      </keywords>
      
      <state id="Test" scope="language.class">
        <begin><regex>{(?={)</regex></begin>
        <end><regex>(?&lt;=})}</regex></end>
        
        <state id="Sub test" scope="language.operator">
          <begin><regex>{</regex></begin>
          <end><regex>}</regex></end>
        </state>
      </state>
      
      <keywords id="Function definition" scope="language.function">
        <regex>([\-=]>)</regex>
      </keywords>
<state id="Function definition" scope="language.function">
        <begin><regex>\((?=[^\n\)]*?\)\s*[\-=]>)</regex></begin>
        <end><regex>\)\s*[\-=]></regex></end>
        
        <keywords id="Function argument" scope="language.function.argument">
          <regex>[\(,]\s*(\w+)\s*(?=[=,\)])</regex>
        </keywords>
        
        <!--ZEROWIDTHS issue (see above): Requiring whitespace padding at the end for now.-->
        <state id="Function argument defaults" type="block" scope="meta.block">
          <begin><string>=</string></begin>
          <end><regex>\s(?=[,\)])</regex></end>
          <import />
        </state>
      </state>
      
      <keywords id="Numbers" scope="constant.numeric" casesensitive="yes" useforautocomplete="yes">
        <string>NaN</string>
        <string>infinity</string>
        <regex>(?&lt;=[^\w\d]|^)(((([0-9]+\.[0-9]*)|(\.[0-9]+))([eE][+\-]?[0-9]+)?[fFlL]?)|((([1-9][0-9]*)|0[0-7]*|(0[xX][0-9a-fA-F]+))(([uU][lL]?)|([lL][uU]?))?))(?=[^\w\d]|$)</regex>
      </keywords>
      
      <keywords id="Properties" scope="language.property">
        <regex>(@\w*)</regex>
        <regex>(\w+(\s+)?:)</regex>
        <regex>(?:\D|[a-zA-Z@\$]\d)\.(\w+)</regex>
      </keywords>
      
      <keywords id="Special variables" scope="language.variable">
        <regex>(\$\w*)</regex>
      </keywords>
      
      <keywords id="Classes" scope="language.class">
        <regex>(\b[A-Z]\w*)</regex>
      </keywords>
            
      <state id="Comment" scope="markup.comment" foldable="yes" usespellchecking="yes">
        <begin><regex>###</regex></begin>
        <end><regex>###</regex></end>
      </state>
      
      <state id="Single Comment" scope="markup.comment" usespellchecking="yes">
        <begin><regex>#</regex></begin>
        <end><regex>[\n\r]</regex></end>
      </state>
      
      <state id="String" scope="string" usespellchecking="yes">
        <begin><regex>"</regex></begin>
        <end><regex>(((?&lt;!\\)(\\\\)*)|^)"</regex></end>
        
        <state id="Interpolation" scope="string.interpolation">
          <begin><regex>#(?={)</regex></begin>
          <end><regex>}</regex></end>
          
          <!--ZEROWIDTHS issue (see above): Requiring full whitespace padding for now. -->
          <state id="Interpolation code" type="block" foldable="yes">
            <begin><regex>(?&lt;={)\s</regex></begin>
            <end><regex>\s(?=})</regex></end>
            <import />
          </state>
        </state>
      </state>
      
      <state id="Single String" scope="string" usespellchecking="yes">
        <begin><regex>'</regex></begin>
        <end><regex>(((?&lt;!\\)(\\\\)*)|^)'</regex></end>
      </state>
      
      <state id="Regular expression" scope="string.regex">
        <begin><regex>(?i)(?&lt;=[=(,:\+~]|^|return|;)\s*/(?![/*+{}?])</regex></begin>
        <end><regex>/[cgimosx]*</regex></end>
      </state>
      
      <state id="Embedded JavaScript" type="block" foldable="yes" indent="yes" scope="meta.block">
        <begin><regex>`</regex><autoend>`</autoend></begin>
        <end><regex>`</regex></end>
        <import mode="JavaScript" />
      </state>
      
      <!--
<state id="Class Blocks" foldable="yes" scope="meta.block">
        <begin><regex>^class[^\n]+\n</regex></begin>
        <end><regex>(?:\r?\n|\r)(?=(?:\r?\n|\r)(?:\r?\n|\r)\S|(?:\r?\n|\r)\S|\S)</regex></end>
        <import />
      </state>
      
      <state id="Function Blocks" foldable="yes" scope="meta.block">
        <begin><regex>^(?'functionstartingwhitespace'[ \t]*).*?(?:[\(][\w\s\.\,\$]*[\)][\s])?[-=]></regex></begin>
        <end><regex>(?:\r?\n|\r)(?=(?:\r?\n|\r)(?:\r?\n|\r)(?#see-insert-start-group:functionstartingwhitespace)\S|(?:\r?\n|\r)(?#see-insert-start-group:functionstartingwhitespace)\S|(?#see-insert-start-group:functionstartingwhitespace)\S|(?:\r?\n|\r)(?:\r?\n|\r)\S|(?:\r?\n|\r)\S|\S)</regex></end>
        <import />
      </state>
-->
    </default>
  </states>
</syntax>
